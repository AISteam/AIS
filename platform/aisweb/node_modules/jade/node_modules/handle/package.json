{
  "name": "handle",
  "version": "1.0.0",
  "description": "Handle events on elements",
  "keywords": [],
  "dependencies": {
    "promise": "~3",
    "matches-selector": "~1.0.0"
  },
  "devDependencies": {
    "run-browser": "~1.1.0",
    "tape": "~2.3.2"
  },
  "scripts": {
    "test": "run-browser tests/index.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ForbesLindesay/handle.git"
  },
  "author": {
    "name": "ForbesLindesay"
  },
  "license": "MIT",
  "testling": {
    "files": "tests/index.js",
    "browsers": [
      "iexplore/9.0",
      "iexplore/10.0",
      "chrome/30.0",
      "chrome/31.0",
      "chrome/canary",
      "firefox/10.0",
      "firefox/15.0",
      "firefox/20.0",
      "firefox/21.0",
      "firefox/22.0",
      "firefox/23.0",
      "firefox/24.0",
      "firefox/25.0",
      "firefox/nightly",
      "opera/11.0",
      "opera/17.0",
      "opera/next",
      "safari/6.0",
      "iphone/6.0",
      "ipad/6.0"
    ]
  },
  "readme": "# handle\n\nHandle events on elements\n\n[![Dependency Status](https://gemnasium.com/ForbesLindesay/handle.png)](https://gemnasium.com/ForbesLindesay/handle)\n[![NPM version](https://badge.fury.io/js/handle.png)](http://badge.fury.io/js/handle)\n\n[![browser support](https://ci.testling.com/ForbesLindesay/handle.png)](https://ci.testling.com/ForbesLindesay/handle)\n\n## Installation\n\n    npm install handle\n\n## API\n\n### `handle(element, event, fn [, capture])`\n\nHandle `event` on `element` using `fn`.  It returns a function that can be called to stop listening.  e.g. to build `once` you could write:\n\n```js\nvar handle = require('handle');\n\nfunction once(element, event, fn, capture) {\n  var dispose = handle(element, event, function (el, event) {\n    dispose();\n    fn(el, event);\n  }, capture);\n}\n```\n\nTypical usage might look like:\n\n```js\nvar handle = require('handle');\n\nhandle(document.getElementById('my-button'), 'click', function (button, e) {\n  e.preventDefault();\n  // do something\n});\n```\n\n### `handle(elements, event, fn [, capture])`\n\nYou can handle the same event on a whole list of elements in one go.  This does not need to be an array, it just needs to have a `.length` property that is a number and have indexed values.  e.g.\n\n\n```js\nvar handle = require('handle');\n\nhandle(document.querySelector('[data-action=\"do-something\"]'), 'click', function (button, e) {\n  e.preventDefault();\n  // do something\n});\n```\n\nIt too returns a `dispose` funciton.\n\n### `handle(selector, event, fn [, capture])`\n\nThis works just like jQuery's `$(document.body).delecate(selector, event, function (e) { fn(this, e) })`.  It too returns a `dispose` function.\n\nThe advantages/disadvantages of using this method are:\n\n - It will still capture the event if the element matching selector is added to the DOM after `handle` is called.\n - It captures the event later (i.e. after those handlers that were attached directly to elements lower in the DOM chain)\n - It only binds to one element, so can have better performance, but it must check every event for a match, so can have worse performance\n\ne.g.\n\n```js\nvar handle = require('handle');\n\nhandle('[data-action=\"do-something\"]', 'click', function (button, e) {\n  e.preventDefault();\n  // do something\n});\n```\n\nIf you want to delegate from something other than `document.body` you can select a start element via the `.on` method:\n\n```js\nvar handle = require('handle').on(document.getElementById('hideable-list'));\n\nhandle('li', 'click', function (li, e) {\n  e.preventDefault();\n  li.style.visibility = 'hidden';\n});\n```\n\n### `handle.once(element|elements|selector, event [, capture])`\n\nReturn a promise that is resolved with the event args once the event is fired.  `e.preventDefault()` is also called since it must be called within the same turn to work.\n\n## Running Tests\n\nTests can be easilly run locally in the browser of your choice, and have passed if it ends with `# ok`.  They are also run on testling-ci when pushed to the repository:\n\n```\nnpm install\nnpm test\n```\n\n## License\n\n  MIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ForbesLindesay/handle/issues"
  },
  "homepage": "https://github.com/ForbesLindesay/handle",
  "_id": "handle@1.0.0",
  "_shasum": "ce32de15629056dfda29b94d08bf57b958a4c702",
  "_from": "handle@~1.0.0",
  "_resolved": "https://registry.npmjs.org/handle/-/handle-1.0.0.tgz"
}
